<!DOCTYPE html>
<html ng-app='energyApp'>
<head>
  <title><%= title %></title>
  <link rel="stylesheet" type="text/css" href="/stylesheets/base.css">
  <link rel="stylesheet" type="text/css" href="/stylesheets/skeleton.css">
  <link rel="stylesheet" type="text/css" href="/stylesheets/layout.css">
  <link rel="stylesheet" type="text/css" href="/stylesheets/style.css">
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
  <script src="../bower_components/angular/angular.js"></script>
</head>
<body ng-controller='mainCtrl'>
<header>
  <div class="container">
    <div class="eight columns">
        <h1 id="banner-header"><a href="#">Save With Solar</a></h1>
    </div>
  </div>
</header>
<div class="page-divider"></div>
<div class="container">
    <div class="eight columns clearfix">
      <form novalidate name="energyForm" role="form" ng-submit="submit(add)">
        <div class="form-group">
            <label for="addr1">Address one:</label>
            <input type="text" name="addr1" ng-model='add.addr1' class="form-control" id="addr1" required placeholder="1600 Amphitheatre Pkwy">
            <span class="help-block" ng-show="energyForm.addr1.$pristine">Required</span>
        </div>
         <div class="form-group">
          <label for="addr2">City</label>
          <input type="text" name="city" ng-model='add.city' class="form-control" id="City" placeholder="Mountain View">
          </div> 
          <div class="form-group">
          <label for="State">State</label>
          <input type="text" name="state" ng-model='add.state' class="form-control" id="State" placeholder="CA">
           </div>
           <div class="form-group">
          <label for="zip">Zip</label>
          <input type="text" name="zip" ng-model='add.zip' class="form-control" id="Zip" placeholder="94043">
          <span class="help-block" ng-show="energyForm.zip.$pristine">Required</span>
          </div>
        </div>
        <div class="eight columns clearfix">
          <label for="input">File input</label>
          <input type="file" id="files"> 
          <p class="help-block">Upload Green Button data here</p>
        <button type="submit" ng-disabled="!energyForm.$valid" class="btn btn-default">Submit</button>
        </form>
        </div>

        <div class="sixteen columns clearfix" ng-show="showGraphs == true">
            <div class="page-divider"></div>
              <h1>Utility Information for: {{utilname}}</h1>
              <div id="kwhChart"></div>
              <div class="page-divider"></div>
            <h1>Solar Information</h1>
            <div id="pvChart"></div>
            <div class="page-divider"></div>
            <h1>Daily Power Consumption</h1>
            <div id="dcChart"></div>
        </div>
</div>
    <!--<div class="col-md-6" id="return1">
      <div ng-show="add.addr1.length">
        Your address is: <br/><b>
        {{add.addr1 | uppercase}} {{add.city | uppercase}} <span ng-show="add.state.length">,</span>{{add.state | uppercase}} {{add.zip}}</b> <br/>
      </div>
      <div ng-show="ajax2 == true">
      <h1>Solar Data</h1>
      AC Annual: {{pvdata.outputs.ac_annual}} <br/>
      Solar Radiation Anuual: {{pvdata.outputs.solrad_annual}} <br/>
      </div>
    </div>-->

  </div>
</div>
<script src="/javascripts/highcharts.js"></script>
<script type="text/javascript" src="/javascripts/mainCtrl.js"></script>
<script type="text/javascript" src="/javascripts/hcCustom.js"></script>
<script>
//http://stackoverflow.com/questions/21318045/javascript-upload-and-read-xml-file-on-the-client-side
      function handleFileSelect(evt) {
        var files = evt.target.files; // FileList object

        // Loop through the FileList
        for (var i = 0, f; f = files[i]; i++) {

          var reader = new FileReader();

          // Closure to capture the file information.
          reader.onload = (function(theFile) {
            return function(e) {
              // Print the contents of the file
              gbJSONData = xmlToJson(parseXml(e.target.result));
              gbData(gbJSONData);
            };
          })(f);
          // Read in the file
          //reader.readAsDataText(f,UTF-8);
          reader.readAsText(f,"UTF-8");
        }
      }
      var allData = [];
      var dailyData = [];
      function gbData(gbJSONData) {
        var dataEntries = gbJSONData.feed.entry;
        for (var i=4; i<dataEntries.length-1; i++) {
            var intReadingsArr = dataEntries[i].content.IntervalBlock.IntervalReading;
              for (var j=0; j<intReadingsArr.length; j++) {
                allData.push(intReadingsArr[j].value['#text']);
              }
        }
        dayData(allData);
        dailyConsumption(dailyData);
      }
      function dayFill() {
        var arr = [];
        for (var i=0; i<365; i++) {arr.push([]);}
        return arr;
      }

      dailyData = dayFill();

      function dayData(allData) {
        allData.unshift(0);
        for (var i=1, j=0; i< allData.length; i++) {
          dailyData[j].push(allData[i]);
          if (i%24==0&&i!=0) j++;
        }
        for (var i=0; i<dailyData.length; i++) {
          dailyData[i] = dailyData[i].reduce(function(a, b) {return parseInt(a)+parseInt(b);},0)/1000
        }
      }

      function xmlToJson(xml) {
        // Create the return object
        var obj = {};

        if (xml.nodeType == 1) { // element
          // do attributes
          if (xml.attributes.length > 0) {
          obj["@attributes"] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
              var attribute = xml.attributes.item(j);
              obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
            }
          }
        } else if (xml.nodeType == 3) { // text
          obj = xml.nodeValue;
        }

        // do children
        if (xml.hasChildNodes()) {
          for(var i = 0; i < xml.childNodes.length; i++) {
            var item = xml.childNodes.item(i);
            var nodeName = item.nodeName;
            if (typeof(obj[nodeName]) == "undefined") {
              obj[nodeName] = xmlToJson(item);
            } else {
              if (typeof(obj[nodeName].push) == "undefined") {
                var old = obj[nodeName];
                obj[nodeName] = [];
                obj[nodeName].push(old);
              }
              obj[nodeName].push(xmlToJson(item));
            }
          }
        }
        return obj;
      };

      window.onload = function() {
          if (window.DOMParser) {
            parseXml = function(xmlStr) {
                return ( new window.DOMParser() ).parseFromString(xmlStr, "text/xml");
            };
        } else if (typeof window.ActiveXObject != "undefined" && new window.ActiveXObject("Microsoft.XMLDOM")) {
            parseXml = function(xmlStr) {
                var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(xmlStr);
                return xmlDoc;
            };
        } else {
            parseXml = function() { return null; }
        }
      }
        

     document.getElementById('files').addEventListener('change', handleFileSelect, false);
      </script>
</body>
</html>